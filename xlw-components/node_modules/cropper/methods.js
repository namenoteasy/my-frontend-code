export default {
  preloadingPlugins () {
    require(['./libs/cropper.min.js'])
  },
  afterChange () {
    if (this.cropper) {
      $(this.$refs.box).find('img.avatar').cropper('destroy')
      this.cropper = false
    }
    require(['./libs/cropper.min.js'], _ => {
      let file = this.$refs.input.files[0]
      // 预览图片
      this.previewImg = URL.createObjectURL(file)
      // 裁剪
      this.$nextTick(() => {
        this.fileName = file.name
        this.fileType = file.type.split('/')[1]
        this.$refs.input.value = ''
        this.methods('initCropper')
      })
    })
  },
  initCropper () {
    let vm = this
    $(this.$refs.box).find('img.avatar').cropper({
      aspectRatio: 1,
      minContainerWidth: 200,
      minContainerHeight: 200,
      translateX: 0,
      ready () {
        vm.cropper = true
        vm.methods('emitResult')
      },
      crop () {
        vm.methods('emitResult')
      }
    })
  },
  async destroyCropper () {
    if (this.cropper) {
      this.previewImg = URL.createObjectURL(await this.methods('emitResult'))
      $(this.$refs.box).find('img.avatar').cropper('destroy')
      this.cropper = false
    } else {
      this.initCropper()
    }
  },
  // 传给父级
  async emitResult () {
    clearTimeout(this.methodList.emitResult.timeout)
    if (this.methodList.emitResult.ok) {
      this.methodList.emitResult.ok = false
    } else {
      this.methodList.emitResult.timeout = setTimeout(() => {
        this.methodList.emitResult.ok = true
        this.methods('emitResult')
      }, 300)
      return
    }
    let result
    await new Promise(resolve => {
      if (!HTMLCanvasElement.prototype.toBlob) {
        Object.defineProperty(HTMLCanvasElement.prototype, 'toBlob', {
          value: function (callback, type, quality) {
            let binStr = atob(this.toDataURL(type, quality).split(',')[1])
            let mimeString = this.toDataURL(type, quality).split(',')[0].split(':')[1].split(';')[0]
            let len = binStr.length
            let arr = new Uint8Array(len)
            for (let i = 0; i < len; i++) {
              arr[i] = binStr.charCodeAt(i)
            }
            callback(new Blob([arr], { type: type || mimeString }))
          }
        })
      }
      if (!$(this.$refs.box).find('img.avatar').cropper('getCroppedCanvas').toBlob) return
      $(this.$refs.box).find('img.avatar').cropper('getCroppedCanvas').toBlob(blob => {
        this.$emit('input', blob)
        result = blob
        resolve()
      })
    })
    return result
  },
  clickChooise () {
    $(this.$refs.input).trigger('click')
  },
  imgValueChange () {
    // TODO 这里注释掉就好了，不过之前为什么写着几行代码不记得了，所以这里有风险
    // if (!this.value) {
    //   this.previewImg = undefined
    // } else if (this.value.indexOf && this.value.indexOf(".") > -1) {
    //   this.previewImg = undefined
    // }
  }
}
