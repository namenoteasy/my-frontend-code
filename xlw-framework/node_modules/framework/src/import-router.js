import Vue from 'vue'
import Router from 'vue-router'
import findVueFile from './findVueFile.js'
import extendsVueFile from './extendsVueFile.js'
Vue.use(Router)
// Step.1 => 从 src/pages 目录下获取主页面、组件、子页面（下文将这三个统称为组件）
let vueFiles = findVueFile(require.context('../../../../src/pages/', true, /\.vue$/), requireFile, 'src/pages/')
let pages = vueFiles.filter(item => item.fileName.match(/\.index\.vue$/))
let components = vueFiles.filter(item => item.path.match(/^\.\/.+\/components\/.+$/))
let childrens = vueFiles.filter(item => item.path.match(/^\.\/.+\/childrens\/[^\/]+\/$/))
// Step.2 => 根据文件名给组件命名
pages.forEach(item => {
  let componentName = item['fileName'].replace(/^page\./, '').replace(/\.index\.vue$/, '')
  if (!componentName) {
    throw new Error('\n路径：src/pages/' + item.path + '中 *.index.vue 文件命名不规范')
  }
  item.componentName = componentName
})
components.forEach(item => {
  item.componentName = 't-' + item['fileName'].replace(/\.vue$/, '')
})
childrens.forEach(item => {
  item.componentName = item['fileName'].replace(/\.vue$/, '')
})
// Step.3 => 定义路由
export default new Router({
  // mode: 'history',
  routes: _.map(extendsVueFile(pages, components), item => {
    let source = item.source
    let myChildrens = childrens.filter(sitem => source.path !== sitem.path && sitem.path.indexOf(source.path) === 0)
    let resultChildrens = extendsVueFile(myChildrens, components, {
      // 最先执行的生命周期
      beforeRouteEnter (to, from, next) {
        let storageName = to.path + '|params'
        // 如果是页面刷新
        if (from.name === null && !sessionStorage['isRefresh']) {
          let storage = sessionStorage[storageName]
          storage = storage && JSON.parse(storage)
          let params = _.isEmpty(to.params) ? storage : to.params
          sessionStorage['isRefresh'] = 1
          next({name: to.name, params}) // 这里会重新执行 beforeRouteEnter，为了不导致死循环，需要有个标记
          sessionStorage.removeItem('isRefresh')
        } else {
          if (!_.isEmpty(to.params) && to.params) {
            sessionStorage[storageName] = JSON.stringify(to.params)
          }
          next()
        }
      }
    })
    return {
      path: source.componentName === 'index' ? `/` : `/${source.componentName}`,
      name: source.componentName,
      component: item,
      children: _.map(resultChildrens, item => {
        return {
          path: item.source.componentName,
          component: item,
          name: source.componentName + '/' + item.source.componentName
        }
      }),
      meta: {
        keepAlive: false
      }
    }
  })
})
function requireFile (filename) {
  filename = filename.replace(/^\.\//, '')
  return require('../../../../src/pages/' + filename)
}
