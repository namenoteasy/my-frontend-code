import ruleFunc from './rule.js'
class Rule {
  constructor (rule = {}){
    this.rule = rule
  }
  test (data) {
    if (!data) return false
    if (this.rule instanceof data.constructor) {
      return Rule.testChilds(this.rule, data)
    } else {
      return false
    }
  }
  static testChilds (rule, data) {
    if (rule instanceof RuleType) {
      return Rule.compare(rule.list, data)
    } else if (rule instanceof Array) {
      let result = false
      for (let i=0;i<rule.length;i++){
        if(Rule.testChilds(rule[i], data[i])) {
          result = true
        }
      }
      return result
    } else if (rule instanceof Object) {
      let result = false
      for (let key in rule) {
        if(Rule.testChilds(rule[key], data[key])) {
          result = true
        }
      }
      return result
    } else {
      return rule === data
    }
  }
  static type () {
    return new RuleType(...arguments)
  }
  static compare (rule, data) {
    let result = false
    for (let i=0;i<rule.length;i++) {
      if (!ruleFunc[rule[i]]) {
        throw new Error(`没有[${rule[i]}]这种数据校验规则`)
      }
      if (ruleFunc[rule[i]](data)) {
        result = true
      }
    }
    return result
  }
}
class RuleType {
  constructor () {
    this.list = [...arguments]
  }
}
window.Rule = Rule
