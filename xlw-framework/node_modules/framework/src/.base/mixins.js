import getFileName from './getFileName.js'
import api from './server-api.js'
import axios from 'axios'
let mixinsList = {}
;(r => {
  r.keys().map(key => {
    let filename = getFileName(key)
    if(!filename) throw new Error(`\nmixins文件：${key}\n命名不符合规范`)
    filename = filename.match(/^mixins\.(.+)\.index\.js$/)[1]
    if(!filename) throw new Error(`\nmixins文件：${key}\n命名不符合规范`)
    mixinsList[filename] = r(key).default
  })
})(require.context('../../../../../src/mixins/', true, /\.index.js$/))
function error (vm, detail) {
  throw new Error(`\n页面：${vm.$route.name}\n组件：${vm.$vnode.tag}\n${detail}`)
}
window.Mixins = function() {
  return [...arguments].map(name => {
    if(!mixinsList[name]) {
      throw new Error(`\n无法找到名字为：${name}，的mixins`)
    }
    return mixinsList[name]
  })
}
window.Mixins.init = function(vm, {data, methods, request, event}){
  if (!data) error(vm,  `缺少data数据模型，请确认是否import了data.js`)
  if (!methods) error(vm,  `缺少methods对象，请确认是否import了methods.js`)
  if (!request) error(vm,  `缺少request对象，请确认是否import了request.js`)
  if (!event) error(vm,  `缺少event对象，请确认是否import了event.js`)
  if (!vm.methodList) vm.methodList = {}
  if (!vm.requestList) vm.requestList = {}
  function methodsFunc() {
    let methodName = Array.prototype.splice.call(arguments, 0, 1)
    let thatFunc = vm.methodList[methodName]
    if (!thatFunc) error(vm,  `this.methods:没有找到${methodName}方法，请确认是否存在。`)
    return thatFunc(...arguments)
  }
  async function requestFunc() {
    let requestName = Array.prototype.splice.call(arguments, 0, 1)
    let thatFunc = vm.requestList[requestName]
    if (!thatFunc) error(vm,  `this.request:没有找到${requestName}方法，请确认是否存在。`)
    if (thatFunc.id) $(window).trigger(thatFunc.id)
    return await thatFunc.apply({api, axios}, arguments)
  }
  for (let key in methods) {
    if (vm.methodList[key]) { // 方法被被重写了
      continue
    }
    vm.methodList[key] = function() {
      $(window).trigger('beforeMethods', {key, data: arguments, vm: vm})
      if (methods[key].id) $(window).trigger(methods[key].id)
      let result = methods[key].apply(vm, arguments)
      $(window).trigger('afterMethods', {key, data: result, vm: vm})
      return result
    }
  }
  vm.request = requestFunc
  vm.methods = methodsFunc
  for (let key in event) {
    if (vm[key]) { // 事件被重写了
      continue
    }
    vm[key] = function() {
      if (event[key].id) $(window).trigger(event[key].id)
      $(window).trigger('beforeEvent', {key, data: arguments, vm: vm})
      let result = event[key].apply({methods: methodsFunc}, arguments)
      $(window).trigger('afterEvent', {key, data: result, vm: vm})
      return result
    }
  }
  vm.requestList = Object.assign(vm.requestList, request)
  return window.Mixins.defaultData(vm, data)
}
window.Mixins.checkEvent = function check(vm, name, messages) {
  if(vm[name] instanceof Function) return
  error(vm, messages || `event:缺少${name}事件`)
}
window.Mixins.checkMethods = function check(vm, name, messages) {
  if(vm.methodList[name] instanceof Function) return
  error(vm, messages || `methods:缺少${name}方法`)
}
window.Mixins.checkData = function check(vm, name, messages) {
  if (name in vm.defaultData) return true
  error(vm, messages || `data:缺少${name}字段`)
}
window.Mixins.checkProps = function check(vm, name, messages) {
  if (name in vm.$options.propsData) return true
  error(vm, messages || `props:缺少${name}`)
}
window.Mixins.defaultData = function(vm, data) {
  if (vm.defaultData) {
    vm.defaultData = {...vm.defaultData, ...data}
  } else {
    vm.defaultData = data
  }
  return _.cloneDeep(vm.defaultData)
}
window.Mixins.error = error
